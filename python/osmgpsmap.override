%%
headers
#include <Python.h>
#include "osm-gps-map.h"
#include "osm-gps-map-osd.h"
#include "osm-gps-map-osd-classic.h"
#include "pygobject.h"
#include <stdio.h>
%%
modulename osmgpsmap
%%
import gobject.GObject as PyGObject_Type
import gtk.DrawingArea as PyGtkDrawingArea_Type
import gtk.gdk.Pixbuf as PyGdkPixbuf_Type 
import gtk.gdk.Drawable as PyGdkDrawable_Type
%%
ignore-glob
	*_get_type
%%
override osm_gps_map_get_bbox noargs
static PyObject *
_wrap_osm_gps_map_get_bbox(PyGObject *self)
{
    coord_t pt1,pt2;

    osm_gps_map_get_bbox(OSM_GPS_MAP(self->obj), &pt1, &pt2);

    return Py_BuildValue("(dddd)", pt1.rlat, pt1.rlon, pt2.rlat, pt2.rlon);
}
%%
override osm_gps_map_get_co_ordinates kwargs
static PyObject *
_wrap_osm_gps_map_get_co_ordinates(PyGObject *self, PyObject *args, 
                                     PyObject *kwargs)
{
    static char *kwlist[] = { "pixel_x", "pixel_y", NULL };
    int pixel_x = -1, pixel_y = -1;
    coord_t coord;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
				     "|ii:GpsMap.get_co_ordinates",
				     kwlist, &pixel_x, &pixel_y))
        return NULL;

    if ( pixel_x < 0 || pixel_y < 0 ) {
    	PyErr_SetString(PyExc_ValueError, "pixel co-ordinatites must be >= 0");
    	return NULL;
	}

    coord = osm_gps_map_get_co_ordinates(OSM_GPS_MAP(self->obj), pixel_x, pixel_y);

    return Py_BuildValue("(dd)", coord.rlat, coord.rlon);
}
%%
override osm_gps_map_set_center
static PyObject *
_wrap_osm_gps_map_set_center(PyGObject *self, PyObject *args)
{
    double latitude, longitude;

    if (PyTuple_Size(args) == 1)
        args = PyTuple_GetItem(args, 0);
    if (!PyArg_ParseTuple(args, "dd;OsmGpsMap.set_center takes two floats (also in a tuple)",
                          &latitude, &longitude))
        return NULL;
    osm_gps_map_set_center(OSM_GPS_MAP(self->obj), latitude, longitude);

    Py_INCREF(Py_None);
    return Py_None;
}
%%
override osm_gps_map_screen_to_geographic
static PyObject *
_wrap_osm_gps_map_screen_to_geographic(PyGObject *self, PyObject *args)
{
    int pixel_x, pixel_y;
    gfloat latitude, longitude;

    if (PyTuple_Size(args) == 1)
        args = PyTuple_GetItem(args, 0);
    if (!PyArg_ParseTuple(args, "ii:OsmGpsMap.screen_to_geographic takes two"
                          "integers (also in a tuple)", &pixel_x, &pixel_y))
        return NULL;

    osm_gps_map_screen_to_geographic(OSM_GPS_MAP(self->obj), pixel_x, pixel_y,
                                     &latitude, &longitude);

    return Py_BuildValue("(ff)", latitude, longitude);
}
%%
override osm_gps_map_geographic_to_screen
static PyObject *
_wrap_osm_gps_map_geographic_to_screen(PyGObject *self, PyObject *args)
{
    int pixel_x, pixel_y;
    gfloat latitude, longitude;

    if (PyTuple_Size(args) == 1)
        args = PyTuple_GetItem(args, 0);
    if (!PyArg_ParseTuple(args, "ff:OsmGpsMap.geographic_to_screen takes two"
                          "floats (also in a tuple)", &latitude, &longitude))
        return NULL;

    osm_gps_map_geographic_to_screen(OSM_GPS_MAP(self->obj),
                                     latitude, longitude,
                                     &pixel_x, &pixel_y);

    return Py_BuildValue("(ii)", pixel_x, pixel_y);
}
%%
override osm_gps_map_scroll
static PyObject *
_wrap_osm_gps_map_scroll(PyGObject *self, PyObject *args)
{
    int dx, dy;

    if (PyTuple_Size(args) == 1)
        args = PyTuple_GetItem(args, 0);
    if (!PyArg_ParseTuple(args, "ii:OsmGpsMap.scroll takes two "
                          "integers (also in a tuple)", &dx, &dy))
        return NULL;

    osm_gps_map_scroll(OSM_GPS_MAP(self->obj), dx, dy);

    Py_INCREF(Py_None);
    return Py_None;
}

%%
override osm_gps_map_add_track kwargs
static PyObject *
_wrap_osm_gps_map_add_track(PyGObject *self, PyObject *args, 
                                     PyObject *kwargs)
{
    static char *kwlist[] = { "track", NULL };
    float rlat,rlon;
    int i, numItems;
    PyObject *list;
    PyObject *coords;
    GSList *track = NULL;
    int err = FALSE;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!:GpsMap.add_track", kwlist, &PyList_Type, &list))
        return NULL;

    numItems = PyList_Size(list);
    for(i = 0; i < numItems; i++)
    {
        coords = PyList_GetItem(list,i);
        if(PyArg_ParseTuple(coords,"ff",&rlat,&rlon)) 
        {
            coord_t *c = g_new0(coord_t, 1);
            c->rlat = rlat;
            c->rlon = rlon;
            track = g_slist_append(track, c);
        }
        else
        {
            err = TRUE;
            break;
        }
    }

    if (err) 
    {
    	if (track) 
        {
    		g_slist_foreach(track, (GFunc) g_free, NULL);
	    	g_slist_free(track);
        }
        PyErr_SetString(PyExc_ValueError, "track cordinates must be a 2-tuple of lat,lon in radians");
    	return NULL;
    }
    else
    {
        osm_gps_map_add_track(OSM_GPS_MAP(self->obj), track);
    }
    Py_RETURN_NONE;
}
%%
override osm_gps_map_download_maps kwargs
static PyObject *
_wrap_osm_gps_map_download_maps(PyGObject *self, PyObject *args, 
                                     PyObject *kwargs)
{
    static char *kwlist[] = { "lat1", "lon1", "lat2", "lon2", "zoom_start", "zoom_end", NULL };
    int zoom_start, zoom_end;
    coord_t pt1, pt2;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
				        "ffffii:GpsMap.download_maps",
				        kwlist, &pt1.rlat,&pt1.rlon,&pt2.rlat, &pt2.rlon,
                        &zoom_start, &zoom_end))
        return NULL;

    osm_gps_map_download_maps(OSM_GPS_MAP(self->obj), &pt1, &pt2, zoom_start, zoom_end);

    Py_RETURN_NONE;
}

// vim: filetype=c
